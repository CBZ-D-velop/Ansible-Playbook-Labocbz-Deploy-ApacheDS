---
# Don't forget to keep this file updated
# molecule/<scenario>/verify.yml
- name: "Verify"
  hosts: "all:&APACHEDS"
  gather_facts: false
  tasks:

    - name: "Verify ApacheDS: Java"
      when: inv_install_apacheds | default(false)
      block:
        - name: "Verify Java -version, with alternative / default"
          register: java_version_output
          changed_when: java_version_output.rc != 0
          failed_when: "'build {{ inv_java_version }}' not in java_version_output.stderr"
          ansible.builtin.command: java -version

        - name: "Check Java versions {{ inv_java_version }}/8 binaires files"
          block:
            - name: "Check Java java-{{ inv_java_version }} custom binaries"
              loop:
                - "/usr/bin"
                - "/bin"
              loop_control:
                loop_var: java_path
              register: file_check
              failed_when: not file_check.stat.exists
              ansible.builtin.stat:
                path: "{{ java_path }}/java-{{ inv_java_version }}"

        - name: "Verify Java -version, with custom binaries"
          block:
            - name: "Verify Java -version, with custom binaries for Java {{ inv_java_version }}"
              loop:
                - "java-{{ inv_java_version }}"
                - "/usr/bin/java-{{ inv_java_version }}"
                - "/bin/java-{{ inv_java_version }}"
              loop_control:
                loop_var: java_call
              register: java_version_output
              changed_when: java_version_output.rc != 0
              failed_when: "'build {{ inv_java_version }}' not in java_version_output.stderr"
              ansible.builtin.command: "{{ java_call }} -version"

    - name: "Verify ApacheDS: ApacheDS"
      when: inv_install_apacheds | default(false)
      block:
        - name: "Get ApacheDS services current state"
          register: install_apacheds_service_status
          failed_when: not install_apacheds_service_status.status.ActiveState == 'active'
          loop: "{{ inv_install_apacheds_instances }}"
          loop_control:
            loop_var: instance
          ansible.builtin.systemd:
            name: "apacheds_{{ instance.name }}"

        - name: "Check ApacheDS connectivities LDAP"
          when: not (instance.ssl | default(false))
          loop: "{{ inv_install_apacheds_instances }}"
          loop_control:
            loop_var: instance
          ansible.builtin.wait_for:
            host: "localhost"
            port: "{{ instance.ldap_port }}"
            timeout: 120

        - name: "Check ApacheDS connectivities LDAPS"
          when: instance.ssl | default(false)
          loop: "{{ inv_install_apacheds_instances }}"
          loop_control:
            loop_var: instance
          ansible.builtin.wait_for:
            host: "localhost"
            port: "{{ instance.ldaps_port }}"
            timeout: 120

        - name: "Get default admin informations from instances LDAP"
          loop: "{{ inv_install_apacheds_instances }}"
          loop_control:
            loop_var: instance
          register: admin_instance_result
          failed_when: admin_instance_result.stdout == ""
          changed_when: admin_instance_result.rc != 0
          ansible.builtin.command: "ldapsearch -x -H ldap://localhost:{{ instance.ldap_port }} -D 'uid=admin,ou=system' -b 'dc=example,dc=com' -w '{{ instance.password }}'"
